Speaker 2: you're listening to the on call nightmares podcast in every week, I bring you conversations with technologists who have spent time on call. This week. We speak to Shay on Mukherjee, who is a system engineer, it intercom and part of the Internal Infrastructure team that's responsible for intercoms availability, performance in scale. So this was another really good conversation with someone who actually is on call at the moment. This was one of his first careers coming out of college, and I think it might be interesting for you to listen to. I may not have an episode next week on Lee do Thio some different things that I've been dealing with with work and some personal travel. And I have a little bit of a medical procedure coming up tomorrow. Nothing to worry about, just something that's going to get corrected. And so I may be short on time a few days. But well, see, I'm going to do my best. Thio talk to some people while I am at Dev Ops Days Houston next week, and maybe we'll get an interview or two. So let's get into our interview this week and will be right back. Welcome back to the uncle Nightmares. Podcast. In every week I come to you and bring you conversations with technologies that are currently working on call or have worked on call in the past. I've been lucky to meet lots of engineer. Si Dios Dios. You name it. And today I'm meeting a system engineer from intercom. It is shy on murky. Correct.

Speaker 1: Shannon. Pretty

Speaker 2: young Mukherjee. Excuse me. Yes, I tried. I tried. I tried, I promise. Ah, I will keep trying. I have mumble mouth from Staten Island. And unfortunately, sometimes things come out bad, so I apologize. You're part of the internal Infrastructure team that's really responsible for intercoms availability. You're helping him with performance scale ability. You're doing all the typical s. Sorry. Working, if you will.

Speaker 1: Correct? Yes. Sorry, Dev. Ops. Ah, damn it. And I

Speaker 2: met Bob Accessory. Cool. So, like, most of these conversations that we get on the podcast, This came because, uh, Shannon had been nice enough to reach out to me and said, Hey, I'd like to talk to you about what I've done in the past and what I'm doing now. And that's how this podcast actually happens. It doesn't happen without people like yourself letting me know you want to tell your story. So, first, um, let's let's hear a little bit about you at you get started working an on call. Sure.

Speaker 1: So, um, you would like to take a step back. So intercom is my first job out of college and started intercom. I started at a software engineer. So the team I was embedded in, um was working very closely with our marketing team. So I mostly started bit doing landing pages, automating our creation of lending pages. And then the teacher took on more work on it, started automating internal work clothes. Ah, tying them back to product development. Um, but also taking ownership off some off for enforcing systems analytics, that a pipeline sort of things. Um

Speaker 2: So, Mom, modern methods of deployment. And when it comes to creation and ensuring that, but creating the tools that you put is don't quickly without someone having to manually do it every time. Correct?

Speaker 1: Absolutely. Like most afar, like like stakeholders were like, basically are internal teams like from finance and analytics that would be working closely with, and I'm helping them like help the company will look market and ah, those sort of things so well. Like this role had like, like on call like we would be on call for song of the service's we were building Ah, it was, but it was mostly from the point of few off like service quality on. But those are things. Um, one important detail here is that our infrastructure team is based off Dublin office, and, um, for that, like the reason like, ah, that's been important is because while I was working on this team doing my day to day activity, there were also other, ah, teams that had taken on Coleman and ship in different ways and one of the teams with the infrastructure team adding to come Ah, back then. So over time Ah, so we have we have the slack channel internally called obscenity, ended up joining that channel through some incident back in the past that I can't remember. But I almost immediately fell in love with almost everything that was happening in that channel from thing from things like, um, discussing some of the major incidents like that would be going on thio sharing like links to past post mortems like incident reviews. We call them internally. So most like learning from pops incidents, but also ongoing incidents. And like, for a good bit of time, I was mostly observing that what was what was happening in that channel? Stay up as time as someone by mostly got really interested in this sort of work. Um,

Speaker 2: it kind of brings me back to a conversation I had with Andrew Cliche for recently, and it sounded like you are part of that group of that. You were the com conscientious developer, if you will, um, and that you took an interest in what happened to code after it left the repo and it went into production. So it sounds like you got that kind of start where I think a lot of people from the software engineering world kind of start. Where is you? Start hearing about what all those ops folks they're doing and you start getting interested, and I really believe that's a great way to kind of integrate yourself into that work. So, um, what? What led you into, like, shifting from just a sweet into the systems

Speaker 1: engineer? Eso Mostly I would say curiosity, like some of the issues were absolutely, like, very complex, gnarly, and it was more like more complexity of the more interested. I would get so on the side while there was an issue on going, Ah, I would probably join the uncle engine Aegis debugging that issue like we would see issues like Oh, hey, there's a five x x rate high on the service and I would see, like an on call engineer command. But on the side, I would also start the blogging and see like, Oh, is it like a load balancer level? It's coming from in genetics. Are we out of capacity? Is it coming from an application stack? Uh, it just it just it just became. I like, like, basically fun to to, um, to get into these sort of things, and it eventually what ended up also happening is in the calm. We have a volunteer dedicated on call team is basically ah, set off engineers that take on on call responsibilities for product teams outside of office hours. Ah, now, At the time, this team was only probably based off Dublin, and I was definitely very interested in the space and wanted to join the team so I can be take on these on core responsibilities a bit more formally. Ah, so that's what ended up doing. And, ah, God. Invitation with another engineer in our San Francisco office and pretty much being on the front line like, ah, one off incidents. Ah,

Speaker 2: So you like a follow the sun model where, you know, essentially Dublin has own called for a certain time. And then you move to a different portion of the world in the North America. I would imagine. Is that

Speaker 1: kind of how your uncle works? Yeah, basically. And now we also do this like, 24 hours because now we have engineering offices in Dublin, London, in San Francisco. So we're going to make sure that if product teams don't have to be on call after office hours, like like, did absolutely don't have to be in. This team takes on cold and rotates every week. A

Speaker 2: lot of people don't realize, I think, and I've learned this is that even if you have a 24 by seven engineering team, it's still necessary to have on call procedures because people who are part of those teams may not be specific experts on those particular service is so having just a plan of, um I guess escalation mixed on a sense for you. So here's a question. And I haven't had a lot of, like, recent grad to first job people, like how many years at school, you know,

Speaker 1: how many years out of school. So I got out of school in 2016 and that's when I joined you to come.

Speaker 2: So you're there now? About two and 1/2 3 years? Something like that.

Speaker 1: Yeah. Coming up to three years in a month or two.

Speaker 2: So did you have a lot of exposure to cloud Technologies or anything where you would have understood a lot of infrastructure prior to actually going and professionally? Because that's the one thing I've noticed unless you're interning. And maybe you did that What getting actual like resource is to learn about what these procedures of like seems like a thing that it's still far off for most university students. Am

Speaker 1: I ready to roll? Uh, you're right. Like like back in college? I was very excited. Like like I started for my unix. Uh, experience started like back when I was 14. 15 So I was like, I enjoyed Lynn Lennox and Unix environments from time to time. However, have yeah, like having really, really worked in a like a professional scaled before? Um, and I also don't have, like, experience working data centers in the comics like Strolling Cloud. So the most cloud things I learned is on the job.

Speaker 2: It's one of those things I'm learning from most young people that I speak with me saying, Young people, I've been in the business now. I mean, almost 20 years when before, when we talked about virtualization, we were talking about, you know, jails and FreeBSD and zones stuff like that with Solaris. So it's interesting. Like how virtualization becomes almost like the first iteration of co computing for a lot of younger engineers and administrators. Now what? I guess they're calling Dev ops at. So it's been really interesting to hear that, So thank you. I think that nothing that separates a lot of the age gap right now, um, in engineering has to do with the, um, access to physical gear and where you've had time understanding the underlying systems and how that translates to, uh, the world of cloud and I've just noticed that, you know, I've seen a lot of really smart young people who have recognized that you still have to understand what's going on underneath, and it's really cool. So I'm not saying that there's a difference between young and old. People come to this. But what I'm saying is that, um, some of us older folks who got an on call earlier you know, our first generations was learning on just straight up hardware how to fix things. And the one thing I will say that I find that younger people in engineering and admin have some luck with is that you're not necessarily stuck on things like dead raids or, you know, figuring out broken physical hardware. And that in itself, I think, is you a leg up because you're able to spend more time on the code based

Speaker 1: Yeah, yeah, one of the things that, like its least like an intercom, be focused heavily. The philosophy of run less software like if a machine goes away on dhe, we don't have to worry about it. That's probably for the best. Like I didn't like me still be barred. Like some system level issues connectivity issues from time to time and ensure the performance of this. I think several of your running on is doing great. But you're right, like I'm definitely not doing things. And I like hyper visor level. Are you

Speaker 2: sure? Cool. So it's time to get into the rules and the rules of the podcaster. A normal little thing that we do every week. You've You've heard it, so you know them. But if this is your first time, maybe you're a friend and you're listening to John having this conversation because you're not familiar with the pod gas store. Maybe you just happen to find the pot. Yes, let's Let's tell you the rules. One. We want you to not incriminate yourself because we don't want you to get in any trouble. This is your first job out of school. Second wing Do not incriminate others because you may still be working with them. And we are blameless in how we do retrospectives. And more than anything during this retrospective oven, incident it wherever you were. Help us learn. So with that, I will let you tell a story of ah, bit of a nightmare. You've run into

Speaker 1: suite So I was actually digging up some stuff from, like, actually my my very first week off going on Colin to this new team that I told you about John that I didn't actually get paid it off first week. Um, uh, so did come out of be disappointed because I was very much looking. I went to you,

Speaker 2: but it sounds like you won. I mean, you won the on call game. Congratulations. Pages.

Speaker 1: So, yeah. Um, but yeah, like, one of my favorite months, actually is something that will mention So now, um, so this is actually one of your, like, classic two. AM for pages. Um um, I got in like they were multiple alarms going off, like one of the first time that I got involved. That's how I got involved. Was five except straight on our billing service sheet. Now, a bit of an internal like architectural internal detail is that our billing service does not talk to the public network is internally only right. And so what we started seeing was that it was serving tons and tons of amount of traffic. While that happened, we also got, uh, alarms going off for our billing database hitting 75% since you And by the time, uh, God looking. It was sitting at 100% a bit chaotic. Ah, while this was happening, are interested to team in Dublin was also in lines are going to look them in because, uh, we don't want to rule out. Like like any security implication that might have been like, because this is an internal service. It's not designed to serve thes kind of traffic is designed for accuracy and consistency. You want to rule out any, uh, like bad news if, like, a soon as we can. Ah, but also, like, get their support on this. So Ah, yeah, we start looking and and like like like it's serving 10. 20 x the ah, the regular traffic. The workers are doing an awful lot of work. Um, the next thing we noticed is while this is happening, we're also seeing integrated performance on one of our most important fleets, like one of our highest to put in points lead also s o. We go digging there maybe like there's a correlation here. Maybe it's already hearing. Ah, but, uh, we wanted to rule that out So it turns out, Ah, we go looking into that. And NBC some a them cash. No failures like main cash issues on coming from that suite. And this is basically a monolith. So we noticed a lot off man cash issues. Now, another architectural detail is that cash off? Our billing service is put in front of the service itself in form of men cash. The monolith can talk to it. It's like a common pattern that we exercise internally is a like a man cash. The risk would be put in front so it can handle the absorb the traffic and and be performance. So ah, now we notice that, okay, there's a degraded performance in creation of this very important fleet. He sees the member national issues, and we have, like, the whole billing service that we need to take care off. Eso just a privatized things. We wanted to ensure that there's no customer impact because we know that a lot of things that happen in billing we can redo those or, like you can go back in time and retrospectively fix those, uh, for the tooling that we have in place. So we privatize. We need to get the customer impact. And the way you made a gate is basically

Speaker 2: every reside question, but that custom impact. Let's let's talk about that for a second. Yeah, let's tell people for a second you're not familiar with what intercom does you think that'll put it in a greater perspective, the customer impact. So, uh, why don't you give us just a two second like brief on what intercom does? Because I think that adds a little bit more contacts.

Speaker 1: Absolutely. So intercom is a messaging platform that let's, ah, online businesses talk to their customers and acquire new ones. So chances are you probably familiar with the intercom through our messenger that you may see on ah, public website. Are their businesses up sites that you can, uh, reach out to their support stuff through? So basically, any time this messenger loads, it hits are in point. It hits of servers for metadata, payload information, and basically to make the experience on the message of personal so

Speaker 2: that I thought your times. Yes, Every time someone goes to a website, they see that little box in the lower right hand corner that says, Hey, I'm Steve Dave or Mary or whatever. You need some help. So customers of your product are relying on that to be able to contact customers off their product. Absolutely. There's two fold impacted in an outage like this is what I really want to make sure our listeners understand. So you're not only having impact to the actual messaging system, but the actual users who, maybe upcoming or current customers off the website you're visiting that this intercom platform is a part of they not Clinton. So yes. So now you have your customers and your customers customers both impact. Yeah, but with the time and where this impact, how long and what you say, What time of the day?

Speaker 1: So this is like early UTC approximately like, um uh, 10 11 enmity. See, it's, uh, not like like like for M Pacific time, Right? Um, so what? There's basic and this isn't like full outage. It's a degraded performance because not all off the traffic is, uh, impacted. But like a select few.

Speaker 2: So thinking, if normal is 99.9999 you know, one or something like that. Where that are we talking like more than the 59 was unavailable. You're talking about 98% or something like that. So you're not necessarily Yeah,

Speaker 1: absolutely. So this is I believe, like, uh, 1% of traffic and get in, get in an hour. We're affected.

Speaker 2: Okay, Right. That makes sense.

Speaker 1: So, uh, our first probably was to mitigate that, identify what was happening, and they get that Turns out, um, through our code cots. And our internal service is this this fleet somehow ended up making its way to our billing service. Another important detail is that because we maintain this cash that the nature of this cash is that is to fail open anytime it cannot talk. Uh, any time it cannot service requests. Excuse me. Any time it cannot service requests. Um, it's supposed to fail open instead of directly talking to the billing service. Be known mom like east to service is to be directly proportional to each other in terms off resources elevations and those sort of things. Um, yeah. Um we noticed that this was happening. Um and, ah, way. Make an application change and tryto return early from from this copepods and stabilize. Uh, this this this high volume Sweet and, um, took us about, like, 40 minutes from identifying, detecting and mitigating this issue. Um, but, um, in the forum and and actually deploying and, like, shipping and deploying the change for it to be live. So, um, while we had a degraded performance, we mitigated that, and perhaps 100% sure that there's no more customer impact, Uh, that that was going on here. So then we go into looking. Okay, Now we have a cash that is not doing so great, because off communication, that working issues and then we have billing service that we need to take care of. It turned out with the man Cassie Shoot had surfaced hardware issues and was not able to be up, eh? So we decided we'd be decided this provision a new hardware, um, it would rely on eight of Lewis and takes a few minutes to provision a new one, change the impound, the orioles and and bring up a new new one in no time, we actually end up doing that on now. We did that, and now we have to warm of this cash and then finally bring the billing service back up now, while I'm actually saying this, I'm also realizing like Miss one point detail is that that cash is supposed to fail open. That means it's a soft dependency overtime. This soft dependency become ended up becoming a hard dependency. And the reason the heart, in a way that it started talking the billing service. So that's that's a think like one. I think that we were going to look deeply into our most morning miss interviews that, um, we would do after after this. So anyways, we bring up the man cash service back up, um, then be trotting. Now the billing service is doing a lot because it's serving dolled internal requests. But it's also getting, uh, getting hit to our workers that are trying to warm up this cash as its noticing a ll. These circuit opens. So we try to control that rate and slowly ship away so that there's no impact of service the databases forming at stable levels on dhe workers that needs to be repaired retroactively because of the impact. Our lives have been taken care off approximately took us like 4 to 5 hours just to get back to the original state from provisioning hardware to making application changes. Thio avoiding customer impact. Um, but, buddy, I'd end of the day, uh, like a man Cash, huh? Hard, very shoe that was supposed to fail Open Dent and obstructing out our billing service, That is No, we're supposed to be close. Thio tiu a fleet like that.

Speaker 2: So many of these stories that I've heard the last couple months that really end up being either like Akash issue, Um, a database, he or something. They always tend to be these little tiny things that have massive impact, especially when you're talking about, like, reducing the number of direct calls to a database. So it's always interesting to hear the similarities. Ah, I guess I don't want to call it the root Cause, but something that was potentially causing a cascading failure. And I'm just amazing. So more than anything, what did you learn from this whole incident?

Speaker 1: Yeah, it's interesting mentioned. Good cut. Because the term I was thinking was more of a black Swan. Because while I was saying this, I was also recollecting a talk from a sorry con two weeks ago on house soft dependencies can become a hard dependency in space. City of Lights on in production environment. I was actually pretty great talk, but I think like that was one of our ah, biggest lessons learned is that, um because this service was a bit complex. Um, and it was built in a way that it's supposed to feel open, but one of the properties ever supposed to be real. It's like that that feels opened it. And our, uh and so, yeah, I Because that's mostly that the self dependency became a hard dependency on. We took a good bit of, like, action Adams out of that too. We gave the service. Ah. Ah, Full audit. Awful good. Look with fresh eyes. It hadn't been touching a lot also. So we re infected a few beds we put testing in place. Obviously ensuring the same thing doesn't happen again, but also retarded. Some of the application logic and changes that we had in place from

Speaker 2: many years of city Judy couple some service is not to be so rely on others. Yeah, basically Gotcha. Very cool. So tell me a little bit about what else you got going on later. The any other interesting projects or anything else that you're doing? Maybe something that you're building it. Inter Connie kind of want to brag about

Speaker 1: multiple projects going on, but like to tie back to the on call journey, The question us. So this, like, one does incident happened was definitely part of this. Are dedicated on call team. One thing we do, One thing we do in the etiquette on call team, it's like rotate people out every 1 1 1 6 to 8 months that you and yours get it. Get the opportunity to join this team. Um, like, upscale and those sort of things. So I'm no longer actually part of this team, however, are so mostly because I spent more good bit off eight months doing these other things, um,

Speaker 2: are not What are you sharing? What you've learned with some of the I guess the newer people that air scaling up, if you will like, is part of what you're doing now. Explaining how you became you at this point. Like how you became not only a trusted technical resource, but also beyond called resource like did you get people? Are you Can you talk like you do that

Speaker 1: now? Yeah. So one of the ways we do that it basically shadowing, uh, Now we have Maur folks joining this team. It's a distributed team Announce that we have engineers on this team, not just from the San Francisco Dublin, but also London offices. So I've one of the things I'm doing here from San Francisco offices, like pairing with people like any time like we would get, ah, issues like get a page Maybe like if you're in the office, just just pair on an issue together, doing a lot off like a knowledge sharing. We also do other knowledge sharing and other ways through incident of views and the weekly meetings. Ah, so it just because it's just become like a very good time is like one of the like, while obviously my ideal way to learn in being on the front line of an old age. But it's still one of the ways to learn. So, uh, yeah, it's definitely happening. Uh, here also, and one of the things that also kind of have become like a natural progression is joining the incident commander team. So which is a privilege which is a bit different because it recorded dish instead of skilled at one might from like line one are being on call is it requires a bit awfully people management and distressing. A bit more of the communication, Almost land and a lot of things. But I'm

Speaker 2: a friend Matt Stratton over it. Pager duty does a really good job talking about incident commanders and their roles within rotations. And how, during an incident, an incident commander can really help keep everyone in line and ensure that there isn't a drift in what the priority is. So taking on that role is extremely like beneficial to your organization. One more question out, I guess what you're doing Would you say that the team is practicing s sorry as faras how and when I say that practicing s sorry, but having people for both building and shipping Ah, lot of the things Or is it kind of Maur? You know, pops where you know there are developers, their operators there are still a little bit of a separation and the two roles How would you describe how you're working? Um really like we

Speaker 1: don't have you like I guess our job titles don't have the time. I'm sorry in them, right? So it's not something that

Speaker 2: we're using. A lot of the cell methodologies is scientifically.

Speaker 1: Yeah, yeah. Um, so from taking responsibility, like taking the responsibilities to, ah, stuffy ship we own and go on call for to our product. Teams are also in Hall for the stuff that they shipping on at the same time, Right? So

Speaker 2: So it's not with multiple levels of responsibility being taken by a number of teams. Absolutely. That's very cool. So, yeah, So here's a big question. I wanna ask you today if if someone is on call right now with a pretty big piece of software or project that they're responsible for, What's a piece of advice that you can give someone that's currently on call and maybe, you know, very new to being on call?

Speaker 1: Yeah, um, I would say, uh, I take it easy. Don't sweat it. Mostly because, like, I remember like my very first week, I was got excited and nervous like my very first week. It was, Ah, the nervous those because I thought, like I must have Mr Page or something like that, but accepted also because this was a very new thing that was trying out and obviously had been trusted with our doing that, um, so yeah, I would say, uh, yeah, take it easy. Don't sweat it. It's mostly computers and machines at the end of the day, so it

Speaker 2: makes sense to me so you can find shown on Twitter. It's shy on J Correct. Yep. Very cool. It was so awesome speaking with you today. Um So if you have any other advice, I think we're gonna go ahead and wrap up anything else to share with everybody.

Speaker 1: Now, thanks for having me today. Really? Appreciate.

Speaker 2: Thanks. Thanks very much for you being part eso. Once again, we think she on. Uh, I'm gonna try again. Uh, Cursi

Speaker 1: Mukherjee? Yep. You got it?

Speaker 2: Yeah, I did it. Oh, I'm so sorry. I It's, you know, kind of embarrassing, but I do now. It

Speaker 1: appreciate you taking the time, and I'm getting it right

Speaker 2: at stake. So much for your time today, and we'll hopefully see each other. You're around New York, right? San Francisco. Oh, you're in San Francisco. I'm out there, here and there. So maybe one of these days we'll see out there so everybody will be right back to wrap up this episode. Thanks again. Well, that was another great episode of on call nightmares that I was able Thio spend some time with Shay on really felt like he told me a lot. So I hope you learned something. And if you would like to be part of the podcast, it's really easy. Just get in touch with me. It's on call nightmares at gmail dot com. You can also find me on Twitter, either at on call Nightmare or at J Destro Get in touch. I'd love to get an interview. Were too done within the next few days just so I can have some stuff. So next week, I am not without an episode. Also, remember, I'm looking for a new logo, and if you want to draw it, please let me know. I will pay you no problem. So, anyhow, we'll catch you next time on the on call nightmares. Podcast X is always for listening and have a great one. Keep them alert screen
