Speaker 1: you're listening to the Uncle nightmares, podcasts, and every week I'd go out of my way to do my best to bring you conversations with Technologies to spent time on call. This week we're gonna talk to Nathan Hardy. He's a friend of mine. He's a person I think that a lot of you may have heard of before. Hey, spent a lot of time at Chef and then after that, made its way over Google. He's a person I think I could actually look at. It's kind of a mentor. He's really taught me a lot about what Dev Ops is. I will say that he's taught me a lot about developer relations and howto work in this weird, weird world where, um, you moved beyond just break fix incidents and you start looking at the bigger picture. He's one of those people that really helped me kind of find my way. So I really want to welcome Nathan to this podcast with giant open arms because I don't know if this would have really been a thing that ever happened, like I don't know if I would have ever ended up doing on cold nightmares if I hadn't met and spent time with Nathan Harvey. So I know I talked him up a lot. But that's, Ah, friendship I'm really proud to have made over the years. So I'm really looking forward to you all here into this conversation, because it really is just two friends really talking about what they've done for a while and what they did the past. So enough chitter chatter. Let's talk about how you could be part of this podcast, and it's really, really simple. Send an email to on call nightmares at gmail dot com, or send a direct message on Twitter to At on Call Nightmare. Or you can reach out to me personally. It's at Jay Destro on Twitter. Uh, I'm happy to hear from any of you I'd like to tell your story, so please reach out. So anyhow, let's get into this conversation with Nathan. It happened over at Chef. Come in Seattle, and I'm really glad I got to you talk with him, so I hope you enjoy your listeningto

Speaker 2: on call nightmares in every week. That's right. Every week I go out of my way to do my best to get you a conversation with a technologist that spent time on call. And today I feel very lucky that I've actually introduced a friend of mine to this podcast to come and speak with me. I came over him and I begged him. Would you do my podcast? And of course he said yes. So I'm here with Nathan Harvey of Google. Um, we're

Speaker 1: here at chef Calm, and I feel like you're

Speaker 2: just kind of part of the furniture here, Chef. Call. It definitely kind of feels like that. First, J Thanks for having me on the show. Absolutely. Like you said, you went out of your way. So we both went pretty far out of our way. We gotta, like, fly across the country to meet each other in person. Yeah, you know, it's funny. Nathan and I, we live like in the same region of the United States, like I'm in New York City. He's in the Maryland area, so we've got that, like, we could take

Speaker 1: a train if we wanted to see

Speaker 2: each other. But we're both on the road doing what we do for our respective

Speaker 1: employers. But, you know, we're both here at Chef Compton. I feel like I'm on your territory because what it really

Speaker 2: feels like because you walk around here and the one of the more cool parts seeing this is seeing people that you you've known for years. They've been part of this conference that just assumed you're just gonna be here, right? And it was just cool like a soon as we walked in one of the rooms, I just saw people walk running up to you and you're wearing a free hugs shirt that read Hard to miss you. It's It's true. The shirt does say free hugs, although most people that know me and certainly the people that know me here, Chef Cough I don't need the shirt for permission to get a hug. They know that. That's kind of it's kind of. It's one of the things that that holds true, I think in the wider ops community, you know, you have the whole sort of hug ops movement, but certainly within the chef community we've embraced. Sorry, that was a bad pun, but way really kind of hold true to that. And look, when it comes down to it, it's all about, and I think it's it's super important as you have this podcast, it's all about how do we help in support one another and recognize the work that each other does? A CZ Well, as recognized that each one of us is ah, whole human right? It's not just about the work that we do. There were things that sometimes go well at work that deserves a hug there. Sometimes things go bad at work that deserves a hug. Things that go great. We're terribly in your personal life again. Ah, hug, hug. Um, when it's when it's consensual. Inappropriate There There are a lot of reasons why, huh Works really well, yeah. There's something that I put on Twitter recently. I actually pinned it to my profile, and I have this kind of feeling, and I've been sharing it with people. It's the idea that ops is love. Yeah, we don't keep way. Don't keep things going without ops, like you love your s Ari's. You left your sister Benz, your operations and your data center staff. Sure, this is one of the groups of people that I feel like like throughout the cloud revolution we're forgetting about is that the data center staffs that exist for all these companies around all these major clouds or cloud based products that still you no need to be in a physical data center to host, like your digital oceans. You know, their companies that are still doing things you know are bare metal. And I think that it's worth it for us to recognize that we have to help them over right? And so it's been cool to kind of collect their stories along the way, especially with on call, because I feel like the coolest part about doing this particular podcast is collecting stories, because I think that that's what people in our position really loved to do. Yeah, we grab stories from people and we figure out the best way to kind of share them with our communities. Sure, And you talk there are a lot about, like helping them over, and I think that a lot of what we do is we help people adopt sort of newer or more modern practices and technologies, but that there is truth also that we have to respect the work that came before us and understand and really know what was that work that led us to a place where we are today, where automation is actually a thing that we can we can adopt at large scale across huge organization. And what's funny is that some of the first real automation that I've ever saw put together we're done by Data center engineer. Yeah. You know, I I remember going through, uh, and getting called while I was on call to say, Hey, you know, this particular red hat server is in, you know, enterprise servers and distributing the packages. Right? But the thing was funny Was that the person that was speaking to me about he already knew how to do, like most of the health checks, stuff like he checked all the right repositories, checked file systems, he knew exactly what he was doing. And he was like, Well, I can write this Python script to do this. And I was just thinking to myself, Why aren't you here in the office with me? But then I realized that they're people out there that being able to rack, stack and get things online, um, efficient and repeatable manners is something that we still, uh, still need and should appreciate. Absolutely. So I said the words on call. And that's what this podcast is all about. It's all about being on call. And so, um, before you were doing community work, you were a technician or an engineer, like a lot of us. So why don't you, uh, take us back a little and give us the history of what you did as a non call? Yes, and or being on call the technology for sure. So I've definitely spent a good bit of time on call, and I do. You know, I've spent the last seven or eight years sort of helping build an amplified communities and, frankly, as a developer advocate, as someone that's supporting communities, you are on call. It's true. He's very truth. It's It's a little bit different, and sometimes that problems are much. Uh, well, there's certainly different problems because, you know, there might be personal interaction, things that require immediate attention. But that's not what this show is about. We're not gonna talk about that. Let's talk about let's talk about some technology on being on call. I remember, uh, So the question was, how did I get to a place where I was on call man, just like just like a lot of people. I kind of fell into it. Um, I actually, uh, probably the first job where I was really on call. I was working at this small startup. I got hired as the director of customer support for a stealth start up. The best thing about a still start up, no customers. And I was in charge of customer support. It was great. It was the best. It was the best three days of being in charge of customer support because look, no one calls up customer support to say thank you, right? They call it because something wrong, wrong, right? And that's why you get the call. So I said it was three days as head of customer support because after three days, the CEO came in and told me that they had just fired all of the technical staff. All of the engineers that built the prototype on I was now the most technical person on the staff. Hot. Yeah, And so he saw the look of shock in my face and he said, Don't worry. We've hired a consultancy to finish the app, and he saw the relief on my face, which He then wanted to dispel immediately and said But But we're going live in six weeks. Your job is to build us a production environment. Go, Eh? So I became a sys admin that day. On that day, I also became uncalled like. I was uncalled for that application. And you have to make a what procedures are on the floor. Yeah, Yeah. I couldn't go to the run book and say, How do things work? Uh, this was building building from scratch on. That was that was super awesome on exciting and exhilarating and scary. But, man, I learned so much. Yeah, I've been in those positions where someone says to you Hey, guess what. This is you now? Yes. And you, You look at those situations and you wonder, how the hell did I get the house predicament? But I found that those congee both empowering because you get put in a position where you're going to make a decision on the technologies that are gonna be used. Now, no one likes to be that one person. Or, as I like to say, for those of us who've read the Phoenix project, you don't want ever be Brent right. Never be Brent. Yeah, but I think that in the way we used to do things, a lot of people spent their had some bread time. Yeah, I had some Brent time. I'm sure you had some Brent time. Absolutely. And you? And for those, like I said who don't know the Phoenix project, Go check out the book. Brent is essentially a character in this fictional novel that all the production deployments have to go through. There's no work that gets done without going on, Brent. And we've all been there, I think, Yeah, sure as we were launching that start up similar thing. Like I, uh, there's there's a little bit of all of us that sort of embraces the idea of heroism, right? I was going to be the hero. There were engineers that we're building the application, and what they needed to focus on was building the application, and my role was to be the hero that got operational environment running. And unfortunately, you know, it's easy to say it now, but it was very difficult to see it at the time. But what I was doing was taking on too much work. What I was doing was truly putting myself into not only this hero role, but also the single point of failure. Sure. And so right before we launch, I got really, really sick on. I didn't have anyone that I could reach out to for help, because I hadn't been sharing anything that I was doing. And so I remember launching that that company essentially sitting in my bed, sick as a dog, Uh, and just doing all of the things that it took him and we launched, and that was successful. But looking back on it, I had a team of people that would have happily helped out if we collaborated a little bit better and talked to one another. And I didn't feel like I had to take it all on myself. Yeah, I feel like one of the things that a lot of us who get past that certain I don't know. There's like, this time threshold. I feel like a lot of us after years of trying to be the hero and living with, and I don't know if this goes to a lot of you younger people, and I don't want to just make an assumption, but I can speak for some of us who are maybe in the late thirties, early forties world, maybe a little older, you know, there was a lot of like pressure for you to be the hero. There is a look. The result. This idea of, like, the rock star this and the ninja. That and a lot of the big companies picked up on the those kind of pieces of language. And so you always felt like you were under pressure to be this superhero. And I don't feel like that's necessary because hero syndrome creates this idea that only one or two people can fix a problem. And if you're stuck in that position, it means that you haven't socialized the information properly internally. Yeah, yeah, I remember a couple of years ago seeing a talk from Jennifer Davis That was about going from hero to zero, which on the surface like, sounds like that sounds like the wrong path. But the talk was really great and really inspiring. And it just reminds us that by being that hero, not only do we put ourselves as a single point of failure, but we're also we're also taking away the opportunity for others to learn and for others, toe have the same experience that we do so in the end, like it's putting a huge personal tax on the person that is in that hero role. But it's also putting a tax on the rest of the organization who can't like they can't participate in those where the documentation pieces that show you what to do when Brent is, we'll just call them. Yeah, leaves town for a few days are awaiting, you know, or when Mary wants to go on vacation and she's one that's in charge of a particular code base, you know, what do we do? You know, if these are the people that we've put in charge of these ideas to leave them in a position of, Well, we can't do much more without them. Just doesn't make sense so fast for yeah, and you go past this week this Brent job where you get them up and running, and then how do you move forward after their Yes. So I spent a couple of years there. I went on to another place, and, you know, this is all about on call nightmares. So boy, you know, before you all had them before we get into what incident? Well, yeah, and I have to go over the rules, right? So I do the rules, The rules? Yeah. I go over the rules every episode and those of you who are listening. You know them, I suppose. Rule one. Do not incriminate yourself. You don't work there anymore, so I think you'll be all right. But still, you could have friends that are still there. So let's not rule to let's not incriminate others. Because, uh, what we do is blameless. And even in this conversation that we have, it's all retrospective. And so the third rule is help us learn from what happened. So I'm gonna give you the mike. Go ahead. Just tell me about a nasty incident. How you recovered from. Yeah, sure. So I'll set up the incident a little bit. We had a wait. A deployment that was going to go out. Why was that? Can you see where this waas? Uh, no, I don't want to incriminate anyone. It was, you know, like where he was a sector where it was doesn't matter. Like this was a It was a website for retail website problems. We were So we were about to push out a new release, right? And, you know, we were at that point, we were probably pushing out new releases once every couple of weeks, you know, So pretty standard change. Uh, and, um, as is often the case, like, there was this release that was happening at work. But there was also this personal thing that I had to do that afternoon. All right? It turned out it was go have lunch with a bunch of friends which, like, it's a thing that people D'oh, I don't You eat lunch? Um, occasion. Occasionally I work from home. So lunch is one of those things that I may fall into. You might fall into lunch, right? Sometimes with other people. It's good to eat lunch with Try. Right. Thank you. Stack overflow for offering me lunch once in a while. I appreciate it. Very short walk. So So, um, So I did What? Any good? Release? Engineer, deployment engineer. Whatever title you wanna call give that person does. I hit the big green deploy button and then I pissed off the lunch. Uh, guess what happened. I Everyone I'm shaking my head after he said the lunch part because I know exactly what happened. I guess you got to lunch. And

Speaker 1: then the alert started. Yeah.

Speaker 2: You know, I sat down, I ordered with my group of friends, and yet the alert started going off. Um, and, you know, I dutifully acknowledge the alerts and went back to my lunch on. Then they kept coming. Yeah. So, you know, I think we've all been in this place before where there's ah thing that is super important to you on a personal level impacts the work that you're doing and like, it happens both ways. On this was a particular scenario. So finished up lunch. I got back to the office, walked in. I knew I knew it was a problem, right? Um and so I sat down. I was talking to my manager and my team, and we immediately just started trouble shooting. And I like it was clear to me, or it was clear to my manager how bad, how terrible I felt and how worried I was anxious I was because, like, this was a severe outage that I cost right. I hit the button. I walked out, and I'll never forget. One of the most important things that that manager did for me at that time was they said to me, Look, you've broken production now. You're really part of the team. This isn't This isn't the last time you're gonna break production. If it is, I'm gonna fire you. But I'm not gonna fire you because you broke production. You're gonna get fired if you never do it again. You know, it's funny. Um, I get what you're what you're you're Paul said to you about, like, you don't really belong in a place until you've broken production or you don't really arrive, if you will. And my 1st 2 weeks of digital ocean, someone asked me to delete Ah, load balancer. That was an extra. You know, it's like a H a proxy server. And it had the same chef noting client name is the production. Why not? And, uh, somebody double named it. I deleted it. Both got removed on and the fail over didn't work for the H and digital oceans, like, you know, inbound new droplet creation Request Paige, we would go on and I had only worked there. Maybe like a week or two. I'm shitting bricks because in the end you're you're still in that position. Where you going To fight or flight like, Oh, no. Um, I'm gonna lose my job in. I'm going to get trouble. Is my rent going to get paid? You might get me a bill to How much? Explain this to my significant other. All this type of stuff Where, As if you work with a lot of really great managers. Now it is You're not gonna get fired. They're gonna just see right an incident report. Let's do a post mortem. Yeah, and let's determine, Was it you or was there a cascading issue that really was the cause? And you were just a piece of the puzzle. And I think that's where we start learning a lot. And you know, not surprisingly, this was totally one of those cascading issues in the way that this error was presenting itself was that the database was under crazy load. I think it was clearly a database issue. That's the all the alerts that were going off database alerts. Everything about this said there's something wrong with too many connections to database or something like your load was spiking. Like everything. Yeah, terrible. Everything there, everything about it was terrible. Um, it turns out that what happened was we had had, ah, little monitor on this application. And if the application wasn't performing or wasn't responding properly, this little monitor would restart the application. Uh, and as it was, uh, looking at the application was checking the health of the application. It was checking in a pretty brittle way. It was actually looking. It's funny now, but we aren't doing this at home. It was looking for some HTML comments on the home page home man. And so, of course you can see where this is going, right? One of the developers rightfully so said, What is this? Hmm? Comment? Doing here like it's not really doing any harm. It's not really increasing the payload, but it's just noise. So I'm just gonna go. If you're gonna do a content check, you could content check on something relevant. Yes, so just deleted that deleted that comment. And then So when we deployed, this monitor was constantly restarting the application, the application would come up. It would wait a minute or two for the monitor to kick in the monitor would check, didn't find the thing that was looking for so it would restart the application. And so once you start doing this across all of your application tear, you just have this cascading failure. Where again, like you said, too many connections on the database, it didn't really like. We didn't see it first as too many connections on the database. The first thing we saw was CPU spiking on the NATO base because it was trying to establish all these connections and then eventually. So, yes, it all just kind of database gonna database. Don't exactly. It's so interesting, but there's like that one pattern or anti pattern that we know of that I've seen in the past that and it's funny. It's like either there's too many connections going on and you can't figure out or their connections that are stuck right, because the queries are too big or the queries Aaron not efficient enough, and you don't have enough see pew and memory to process the ball. And so you end up, you know, dealing with a build up our cue. I mean, luckily, if you're using like a rabbit and Q or something like that. You're queuing your messages. If you're not. I mean, you

Speaker 1: could get really, really overloaded.

Speaker 2: And your mobile. Yeah, it sounds like that's what happened. It totally was. And it was. It was also like this brilliant moment where it just kind of reminded everyone on the team that we have to work together and communicate with one another. This front and developer made a knock us change. A thing that was so simple yet had huge implications because there wasn't enough communication. Didn't know what this thing was for, so just removed it. And it's also, you know, it's funny. I hear people talking about like, oh, html or C s s. It's not real programming. Uh, but you know what? It can have riel implication, production environment. We removed one html comment and we took down the application. Yeah, I think that we don't as an industry give enough credence to the work that people who actually insure the front end of the stuff that you do looks good, operates well and operates in a stabbing quick, you know, waving when you click on stuff or use an application responds the way you expect? Yeah, I might take it a little bit. Further day. I think you're right. Maybe we don't give enough credence or credibility to the folks that are doing that front end work. I would say that within our industry, if you're not doing the same work that I'm doing, I don't respect you as much. Xerox. I think it's terrible, and in fact it's beyond just within our industry. So it's of course we care about the titles and the work that you do within our industry. But I also, uh, I also get very sad when I see folks within our industry that is, frankly, a very privileged industry, looking down on other humans for other work that they have chosen to do. Sure, expecting that, Yeah, that really, really hurts. So I feel really strong about labor, and I don't want to get too much into this because it's not really working. It's more about the work. We do not the concept of work. But I believe that no matter what we do, work is work. Yeah, and that we should respect the work that others do, whether you are, you know, taking care of writing scholar for a server. If you are the person that cleans up the area outside of the office where someone's writing, Scott, it's all work. Absolutely. And so the things that I've learned in the last few years are interesting from being in this position. But I want to know. Yeah, you learned a lot about, um, communication. Yeah, but was there something that really changed in the organization afterwards? Where that, like innocuous comment, huh? That got removed. That can't happen without someone knowing it. Was there something like that changed after the right? You know, it's it's it would be great to say, Like, from that point, we institute instituted strong code reviews. And the truth of the matter is we had Coke reviews. We knew the code that was changing, just going into that right, And it slipped through. And so I think the key learnings that came out of that were number one things. Things were going for me. One of the key learnings was things are gonna break things gonna break all the time. Oh, it it doesn't. It doesn't matter what safeguards we put in place. Things are so gonna break so that it became a question of Okay, well, so how do you respond when those things break? Your and my manager did a great job of modeling The right behavior did not come in angry and red face jumping up and down and shouting about this out. It came in very calm, cool and collected and helped work through the problem. And that's exactly what we did. We start working through the problem. Okay? Database load is spiking. Let's so what does that mean? What could be the potential causes? What are things that we threw out as ideas that could like, if that were true, other things would be happening, right? And so we really got into that sort of communal or group troubleshooting. There was another thing that happened. Someone came into the office where we were working where we're collaborating together and they had had a question and again the manager was really good. Said, Hey, we're right in the thick of it. So I don't I don't know what your question is, but it can probably wait because we were dealing with an incident to stay on the critical path, if you will. So absolutely. So we did that. And then afterwards, once it was resolved, we then took the time to figure out well, what was the process that led to this outage. And let's make sure that we have all of the people in the room discussing that. What can we learn from that? And how do we How do we go from here? Yeah, you know, it's interesting, too. Be ableto have good managers to lead you through these types of situations. And I feel like when I talk to people about their biggest on call incidents, you know, the conversations I don't tend to have on the microphone very much are where managers didn't step in to help prevent the situation from ever occurring. And we tend not to have those conversations because we don't want a bad about their managers. But I think that many of people who have been a part of major outages can almost look att. Well, you know, there was a breakdown in access control that a manager never really looked or, you know, there was a breakdown in communication, and I think that good managers will recognize these types of gaps and help your team fill them in and on, and it's important for a person on call him manager. That's gonna help you fill in gaps at times absolute. Whether it's around the technology specifically or two, you know, in some situations, you know there needs to be some sort of repercussions, but never exact the punishment in the middle of an incident. Certainly not then. So, like if you need to do some sort of like what we need to write about this and has to go on a company file because you didn't do this, this or this, that happens to companies. And we know that, especially once you get into bigger companies, right? But don't ever exact that kind of thing in the middle of an incident. I think that's another thing that because I've seen managers like fly off the handle in the middle of a bad thing. Yes, and that caused more problems than it did actually like the actual incident. Absolutely. If you look at that, if you look at the team around you that are in this like troubleshooting moment, there's already a level of stress and anxiety on just layering into that is only going to make the decision making worse on is likely going to exacerbate the issue. And so it is. It is super important that in the moment what you do is, you stay in the moment and let's let's get this recovered. We're gonna have a chance to learn from this later on. Let's not waste that chance, but for right now let's get the system were covered. And for you, the person on the other side of this conversation is listening us. If you have actually like, created an incident that occurred and that you're dealing with it, you know, and someone called that called and it's a nightmare. Don't overwhelm yourself with guilt. I think that that does more harm than good as well, because you're going to create an emotional incident for yourself where you're not going to get past that. And there's no way that you'll be able to fully recover because you'll be so worried about the work. You're doing what you did wrong, and then how you're going to deal with what you did wrong after I think that I've been in a position where I had to worry what I was gonna do after the fact, and it killed me. So way learned a little bit about, you know, things. You've worked as a manager before. You worked with people who have been on call, Correct? Yes, I have. So I like to ask people who have managed on Paul Resource is what's, ah, piece of, um, advice you would give to say a manager right now. Who's got an on call team underneath? Um what? What kind of advice? Do you think you could give that manager? Yeah, I think the first thing to do is to remember, you know, in the heat of the moment, you've got to keep things cool, right? Stay in the moment. Remain calm and cool, collected and go through a good troubleshooting process. Have Have, uh, you know, you're asking questions all the time. Ask Ask if it if it is this what? They're signs that it couldn't possibly be this right and just be very inquisitive, like we're inspecting this incident. And really trying to get the most are the best answers out of it. But then I think the biggest thing from our manager's perspective is really to think about after that incident. After you've recovered, how do you learn the most from that, it's sure ensuring your people you like, get a great kind of feeling after the fact, like, yeah, this sucked. But you know what? Here's what we gained from that. And I think that, you know, failure creates some of the most introspection possible, especially in a technology organisation. Absolutely. And I think you know, when I when I talked with other managers, I remind them that look, success and failure just opposite sides of the same coin. Sure. And for every success that you're celebrating, you should also be celebrating your failures. Because when you celebrate failure, what that means is you're embracing the opportunity to learn from it on. There's so much that you can learn from it both from a ah technology perspective, of course, like oh, this system that we've architected is brittle in this way. Look, fix that. But more importantly, it's about the organizational structure at this particular place. One of the things that we did that had the biggest impact on how we worked operationally was we started opening up our post mortems to more and more people. We had people that were not on the technology team participating in the postmortems. And frankly, I think they showed up for those not expecting to do anything. Except I got this meeting that my manager said I had to come to for an hour and they sometimes have the best insights because they weren't actually in the thick of it. They weren't actually on the incident. Maybe they're in product. They're hearing from a new engineer around. What they saw was a problem and how we can improve the product around failure. So when this is failing, we have some sort of backup system that we can go to a least provide some sort of information. I get absolutely a CZ a good example of that. We had one postmortem where I have been asking our developers to come along, and they they were very resistant to it. You know, that's not my job. Sure, which totally makes sense. I eventually convinced one of the engineering managers to come along to this post mortem, and we, the operators, figured out what the problem was, how we could prevent it in the future and if you step back and look at our solution. It looked like a Rube Goldberg experiment you know, like the boot comes up and it kicks the egg and egg rolls down the thing, and eventually you get breakfast. The engineer wth e engineer in the room stood back and said, Yes, that will totally prevent this from happening again. Also, I could change two lines of code Thio work around this and prevent that from happening again. Which would you prefer? We D'oh! Yeah, yeah. I'm glad you're here. I wish you'd spoken up sooner also. Thank you. And let's go change those two lines of code. Right? And it was as easy as that. But without that person in the room, we don't learn that way. Talk, talk, talk. Talk to everyone. Yes, Cool. So, you know, let's we're gonna start wrapping this up. You're gonna bring it to the end. And I want to talk a little bit about what you're up to nowadays. Yeah, what you're up to nowadays is is very familiar because it's not that far off. So your developer advocate with Google? You work with an incredible team of people and the one thing I like to say about people in advocacy we all serve the same communities. We just worked for different companies. But we're all teammates, I feel. And so a lot of what you do, I feel, was very, very close to what I'm doing to absolutely. How's it been as a developer advocate? Because you've made the change on the reason. I say, like, you feel like your furniture, your chef conference. You're a chef for about 16 years. Yeah, that's a long time in tech. Yeah, and, um and I feel like you've brought over this really positive energy into the world of advocacy and evangelism and feedback and conversations around tech. So tell me what life is like lately for you. Yeah, life at Google is is great. I think you know, the role of an advocate is to go out into the world and help people learn on how people understand. Maybe new were emerging practices and technologies that can help them be better, whatever it is they're trying to do. And so I've I've, uh I've always sort of held that idea of learning and changing. The work that you do is as near and dear to what I care about most. And so, to whatever extent I can go out and help people do that. That's great, Thea. Other thing that's super awesome as an advocate is I have the privilege to go and meet with a bunch of people who are doing things in in old ways in new ways, in changing ways, with success, with failure. And I just get to see and experience a lot of different organizations, right, big and small, new and old, all of that. And really, it's a It's an honor to go and be ableto observe the work that people are doing and and then to bring that back into Google and share that with other folks. Yeah, I can feel kind of similar in the way I handled my business and Microsoft. I feel like I'm lucky every day that I get to meet people like you listening on the podcast like I'm talking to you because, you know, I get the ability to have these conversations with people like yourself and all the other people I've talked to so that the people in the podcast can hear it because I feel like all these stories off outages and incidents they need to be collected because there's not a lot of people collecting these stories, and a lot of them were rooted in a time and technology that's long gone. I mean, a lot of the old break fix admin work is pretty much been replaced by automation. A lot of the old deployment methodology is replaced by an automation by the same people that used to be the break fix. Admit right. And so it's it's really cool to see how work has changed, but at the same time, how people in a way are still people? Yeah, and they just want information they want to learn from you. And so I love being an advocate, and I think from what I've learned from you, because you and I just as a personal part of this and I'm sorry if I'm getting a little personal, you've helped me a lot of my career in the last few years, and I'm really thankful for it because I wouldn't be in advocacy if I hadn't listened to people like yourself. Bridget, Um and it's just been amazing. And I told this to Bridget recently, and she got really, like, red face, but like, you know, seeing people like her, you Waldo Grunwald Like one of my first Dev ops days. It really influenced me to want to make sure that I'm having conversations that being insular in this industry is on Lee a detriment to you. So thank you. Well, thank you, J, because I think, you know, I learned something every time we have a conversation, and it it is truly about listening to one another and treating each other like actual human beings and respecting the work that each of us does. Uh, and I've learned a lot from you over the last few years. Well, thank you. I appreciate. So we're gonna wrap things up. Thanks again, Nathan. I really appreciate it. I know you all just listen to two friends. Kind of just chat for a while, but I think you kind of I kind of got something from And I hope you learned something. So to anyway, thanks to you. All right. Thanks. You're

Speaker 1: gonna You can hear the handshake this time. Everybody. There it is. That's because we're here together. Person. I'm sorry. It's not as good a microphone is normally have, but I'm working on that, so we'll be right

Speaker 2: back to wrap up this episode, thanks to get Nathan and we'll be right back with on call nightmares.

Speaker 1: That was a ton of fun for me, and I hope you enjoyed it as well. Nathan's just a really good person that's gone out of his way over the years. To just give is much as he can to everyone as possible. And for that, I really do appreciate what he's doing over Google is great. I wish he was doing it with me where I work, But you know, we can't always have everything we want. So that's it for this week of own call. Nightmares will catch next week. Please keep listening and remember, I need your stories so reach out to us on all the different ways I told you, whether it's using Twitter at on Call Nightmare or at J Destro or just send me email on Call Nightmare's at gmail dot com. Your stories make this podcast happen, so I'm looking forward to getting more until next time. My name is Jake Gordon. I do what I can to get you every week conversations with technologies that have spent time on call Thanks a lot for listening
