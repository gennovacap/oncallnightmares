Speaker 2: you're listening on Cole Nightmares. Podcast In every week I bring you conversations. The technologists have spent time on call this week. I come to you from the quiet. There's no one in here. So that's what I'm talking at. M s build little echoey. It's because I don't really have a good Bonder microphone rather to work with. I apologize about that, but anyhow, it's been a really cool opportunity here to meet a lot of people, speak to people, see some of the sessions and really just get annoyed idea where Microsoft Azure is going next. Been able to spend some time with people that I really, really like. Oh, and some people that I envy and just want to be able to get an opportunity to talk to. So that's really been this whole event. It's it's really great. I'm on for Thursday when I'm releasing this podcast, I'm going to be taking part in a community developer experience event called Bits of Build, where it's free event on. It's all community based, and I'm gonna be doing a talk on overcoming failure. So hopefully you, uh, someday get to see that talk because I think I'm gonna try to take it on the road anyhow. This week I speak to my Julian off the duck billed group, uh, organization that comes out there and does its best to help you save money on your cloud bills. You may have heard of my Julian and Cordy Quinn. They really do some interesting stuff over at the duck billed group, and I just want to help save you money. So let's get into this conversation with Mike and hopefully you learn something really cool from this conversation. So you're listening once again to the uncle of Nightmares podcast In every week I try to bring you and I say I try because I know in this last week it's a rarity. But with Microsoft build and all that, so coming up, I thank you all for a little bit of, I guess, patience with me as finding these incredible people speak with is is a ton of work. But this week I once again bring you another person who spent time on call. This time I speak with my Julian. He's the CEO for the duck billed group. He's the author. O'Reilly's practical monitoring. He's the editor of moderate weekly Wish he was kind enough to mention me in on the podcast. And he's also the host of the real world. Devil, I guess. Thank you very much, Mike, for being part of this.

Speaker 1: Yeah. Thanks for having me. I'm excited.

Speaker 2: A friend of mine that I also worked with Jason Hand. He had mentioned me. Hey, do you know, you'd really I think he really liked my Julian. He's really cool. You think you should talk with him? That

Speaker 1: is a fantastic Jason hand and brushing. Thank

Speaker 2: you. You know, I spend a lot of time with Jason, so I get to know a lot of Jason isms, and he basically said you and I should talk, so I think we should talk, and that's what we're doing out, So All right. Oh, but the cool thing about this podcast is that we don't necessarily, um I need to hear the blood guts and everything, because it's not necessarily a horror show that what? I try to put together a cz the word nightmares in it, but it's more about a retrospective. But before we kind of take a retrospective on you know something that you've run into Mike. Let's let's get a little into your career right now. You've got the duck billed group, which is something that, like I said, you and yourself in Cory spent time helping people optimize bills for cloud usage. Before that, you worked like many of us in the world's systems and operations, Dev Ops up. So it won't tell us about how you get started.

Speaker 1: Yeah, so I actually have started working as a uh so I got started in high school. I was, I think of the English class one day like a sophomore in high school, and I get pulled out of class by the librarian, who I kind of sort of new and a couple people that I've never met before. They identified themselves as being with the school district in 90 and they handed me some paperworks That how you're working for us now. And I'm like, Oh, you're paying me to do this? Well, sure, I was gonna do it for free, but all right, so I started off my career managing mainly Max, like the old school stuff of the ancient I books and PowerBooks running like Os seven sort of thing. And just kind of went from there, threw up through desktop management into Windows Server administration and then eventually switched over to running Linux systems. Kind of where I think my career really was. Got started as faras the interesting stuff Ghost was started running the NOC for Oak Ridge National Lab. It is very sizable infrastructure, and we had three super computers that were worldwide ranked like the floor down, which was a lot of fun to be around and also an absolutely wild environment, because I would take phone calls of people calling into the Knox saying, Hey, I have a question about Wait a minute, what's your clearance level? So that was fun. Yeah, so

Speaker 2: late. And security on that asking, I suppose, in regards to, you know, access. But you know, right, you don't need to worry about, I guess back then you getting socially engineered or anything because, you know, you're next supercomputer rupture. I had I had access management. You need right.

Speaker 1: It did happen. Or at least like we knew, that the sorts of things were occurring. And because we're a national lab, these things were in specifically occurring to us. We had nation states that were interested in bridge. So it's kind of a big deal, and we went through a lot of training. I'm a member of In for guard, which is the FBI, a joint FBI civilian task force for cyber security, as a result of having worked there. So it was a wild environment of loss of pretty interesting stories there and then went through Oak Ridge into working for a company called P Coasting, which no longer exists on. And we can get into that later. Oh, no. Oh, yes. And where and where I start work with Cory Quintas mentioned earlier was he recruited me after a peek to go work within that house, consulting It was a major Bay Area consulting firm. Super cool Stuff worked with a lot of really interesting clients on really fun problems. And after talus I I got that bite of consulting and it's like, you know what? I I'm pretty good at this, like I'm a and I have an idea about how consulting should be done from like, the business angle, and I've been working a lot with the clients on during monitoring. Consulting like Tallis would drop me into clients is the class book. Oh, my God. You're a monster expert. Like we would love your help on exactly that thing. It's like one of the clients they dropped me into was Airbnb. So I helped Airbnb start a overhaul of their architecture for the corporate i t. Side of, like monitoring all the data centers, all the call centers worldwide. And how do you do that, like, is really fun problem. So I started off on my own and started doing just monitoring consulting, and that's where I was until last year and 2018. Really? I'm sorry, Uh, in earlier 2019 when I emerged with Corey and stop doing monitoring, consulting.

Speaker 2: So now you've you've reached the point where not you're you're doing all these types of consulting jobs And I did some consulting for a little while myself and the one thing that I really took from it, and, uh, I really felt that it gave me a great kind of overview of all these different types of customers are people with just different types of problems. Bad alone really set me up for where my career would go in the future, which is, um you know, any time, any place that thing has to happen, you know, being able to assist people. Take a look at the broad view. The technologies help. So it sounds like you've done a lot of that. So you have you spent a port a larger portion as a consultant on call. How did that work for you?

Speaker 1: So as a consultant, I was never on call. Everything. When I was working for house, we were guesthouse consultants. Couldn't be on call contractually. Okay, But I advised a lot of people about how to structure on call. And that was all based on my experiences in being on call myself for many, many years before that, it was a consultant running my own thing. I was never on call because what we provide, what I'm providing, what we provide now is advice way. Take all this all over years of experience and all the different companies that we work with and what we see, what works, what doesn't and then give that advice to people s so we don't actually implement anything. Therefore, we're not on call.

Speaker 2: You're helping people make the good decisions exactly. And giving them the direction for that good decision. But ultimately you're helping them also make a decision on what the technology will look like for people who eventually taken after. I suppose you build and deploy. So there is a kind of, I guess, an on call without it really being called. Would you sing

Speaker 1: for us? It's actually a purely advisory. We don't bet anything. It is very much you bring me in. I sit down with your team for however long, and we'll talk through our problems. But my entire goal is a consultant, as it should be. For every consultant is knowledge transfer, So stay away from either. Yeah, the least valuable thing that I can do for our client is do the work for them. It is much more valuable for them for me to teach them how to do

Speaker 2: the work. So you're setting them up for the long term success rather than doing

Speaker 1: the directly right. Like a client should never depend on me in perpetuity. At that point, I've felt in my job my job is to make them better. That's the job of every consultant.

Speaker 2: Okay, that that makes a lot of sense. So let's Let's talk a little bit about on call, though, because yeah, that is what? This podcast. Is it out? And in order for us to kind of talk about on call, we're gonna have to go a little bit backwards and talk about this company that no longer doesn't exist. There's Ah, there's a plus side on the downside, Uh, to all this now, the plus side is that I still get to mention what my rules are because it's my podcast, and I'm gonna do that. Uh, but the rules are very, very simple. It sounds like you may break one of them, but it doesn't matter because we'll get into that of the rules of the podcasts are simply do not incriminate yourself because, you know, we don't want to get a trouble. But you've already informed me that a do not incriminate others. By the way, this story is going to go. It sounds like the company that we're gonna riff or two. You incriminated the hell out of themselves into no longer existing. So that's fine. We can talk about that more than anything. Let's learn something because that's why we have this podcast we want retrospectives, not just the horror show. So tell me a little bit about something that happened you whether it's a one on call incident off, multitude of incidents. Let's hear.

Speaker 1: All right, So, uh, this this company I work that I was one of the early employees, surly senior employees at it. The company had been around for 10 plus years by the time I got there, but had sort of recently experiencing some major growth. They managed data centers in a time when managing data centers was kind of silly, but they did it nonetheless. And the whole pitch was that there are certain workloads that don't make sense to run in the cloud. They make a lot more sense to run and data centers for various reasons, primarily latency between machines or access to the high performance hardware. So that's what we did, and we did. Okay, So some of the challenges associated with were entirely around growth. Things like, if I need to. I have a server sitting in Iraq and I need to provision the server. I could do it by hand. That will take me a couple hours to do I can do it. Automated But now I have the time spent building the automation. But I get that down to not a lot of time. Maybe 15 20 minutes, half hour, tops. This kind of breaks when you say I have 3000 servers sitting on the sitting on pallets in the loading dock and I need them all deployed next week C as in your head real quick and like, that ain't gonna work. So we started building a lot of stuff and like, this is our growth. So we started hiring a lot of people started building a lot of tooling, and things got really complex really fast. So one of the first incidents that I the big incidents that I ran into, and I want to mention this one first because it's something coming up. The news recently, Uh, the news is talking about 7 28 K Day. And what's this referring to is the number of global routes in the global writing table is about from B G. P table is about to hit 728,000 which that's the water out. Well, the problem here is that ah, lot of routers are not configured to handle that many routes. So it's going to result in a rat overflow so like isn't up for overflow. Now we have huge issues with runners. The riders will crash Well, in 2014 the same thing happened. But we hit 512 k day. Some of the others that we were using and Cisco had been predicting this for a while years. Some of the things some of the writers we're using for our core routers where of such a model that they could not be upgraded memory wise and the memory didn't allow for anything more than just under 512 112,000 routes. Totally right. So these Air Corps routers. So I drop a message into our chad. I'm like, Hey, folks like this might be a thing. Maybe we should check this out like our routers. Fine. What are we doing about that? There was like, Oh, no, it'll be fine. We're okay and that it happens that, like noon ish on a Friday ethic, it waas Ah, the global rubbing table refreshes and we get just over five five 10 or 12,000 routes and our core riders crash just gone away. The problem is you can't bring them back up because they already have the routing table. And if you try to refresh it, we're just gonna get the same thing. So our solution was at basically replace the writers with spares we had laying around are not the same models, which is a huge other problem. Now, we're reconfiguring core routers on a Friday afternoon and like, Well, this is bad.

Speaker 2: Yeah. I can't imagine that really being a thing that's gonna make everyone have a very solid, quiet weekend.

Speaker 1: Oh, no, it was It was pretty tough. So there are a lot of other similar sorts of stories, And what I really want to highlight with that story is that we shot ourselves in the foot like a Cisco have been warning us for the about this for years. And we were so busy with growth and trying to just keep the ship afloat that we missed this huge thing and essentially good. Yeah, is that we missed this huge thing and pointed the gun at her on foot and pulled the trigger like, Well, that sucks.

Speaker 2: You know, it's interesting. Now it is. We talk a lot about the things that create the most is faras outages, downtime when it comes to systems and what really sometimes comes down to more than anything, uh is toil and you get stuck with toil in and technical debt. That leaves you in a position where when a vendor comes to you and says, Look, you're you, this is all going to shit soon if you don't take care of your upgrades. And I think that's why so many of us moved to manage service is, uh or, you know, manage offerings from vendors. Is the fact that it's It's those types of small things that we put aside because we want to build features and deal with growth, where your technical debt, I think, really goes to the wayside and you lose.

Speaker 1: The really frustrating thing about all this is that we were the vendor, so other companies were hiring us because they were trying to offload that toil, but weren't capable of handling it at the scale that we were so like. There's no one outsource to because we're the outsourcer

Speaker 2: yet. So, like, let me ask when you get in a situation like that, you told me how it like No. Was this something that was happening in perpetuity? How did you eventually

Speaker 1: So that one issue way resolved that pretty quickly. Because, like it's a known thing, we know exactly what the problem is. You know what we have to do to fix the

Speaker 2: problem? The matter routes. And that's right. Amount of having after that route if a new route entry comes to go into the table.

Speaker 1: Yeah, exactly. S o. We know we know the bounds of this. We know the cause. We know the solution is just a matter of implementing and implementing. It happened to be the painful

Speaker 2: part. Well, we got

Speaker 1: it done now. This company, it kept having these sorts of problems. These, as you say, it toil issues. Uh, just paying. We're trying so hard to keep the ship running that we would continually have more and more problems. I remember one. So actually, I wasn't here for this one. This one is the one that ultimately did the company in. Oh, and I had friends there that were telling about it, and it made the news. I was actually pulled into a deposition with a room of lawyers to discuss this incident. Uh,

Speaker 2: let's let's do this. I'm

Speaker 1: now I'm s o the incident like it's going to sound more boring than it actually is. But what happened is a someone logged onto a writer, a Cisco router and typed show config. I'm sorry. Show, Show, run. So which shows the running convict? This is a completely normal standard thing to do. Unfortunately, for whatever reason, a This triggered a unknown A at that point unknown bug in the Cisco router that underst on a certain billed under certain configurations, circumstances causes the Ratter to crash and reboot. Well, that sucks, But we have fail over and is using, I think, is a V S s configuration. Eso is paying attention to this so it automatically fells over a secondary writer. Unfortunately, that triggered another unknown bug where that second runner, upon realizing that it is now the primary, decides to also crash te voy. So the 1st 1 comes back up and someone's like what the crap is going on. So I type show run again, which crashes it again. Well, about that time that they have type, show run, the secondary is now back online and becomes primary again and crashes. So this whole thing just leaves into a crash sleep, and we can do absolutely nothing about it. And they just keep crashing over and over and over and over. So we start finally, bug reports and all of this, and like, uh, this leads into what became the peak hosting versus machine zone lawsuit. Okay, this is all public record. So there is nothing that I'm saying that can't be found by an enterprising person that wants to go search the Senate. Claire Court records. Okay, It's fascinating problem because it's it's a whole lot of you get the sense that in the court records Peak is saying like, Well, we're blaming Cisco for this bug. Well, in my experience, yes, the bug sex. But there's also a whole lot of management problems that come in like infrastructure management problems in organization issues and personnel issues, and how you manage a company and how you manage your own call. How you manager, instant response, how you manage change control. All this comes into play. The Sisko bug. Taking the company down was merely the tip of the Asperger.

Speaker 2: So with the grand scheme of things, while a single incident could have cost this like cascading failure. The ultimate really failure didn't come from anything you do software. It really had here with the lack of vision in the people implementing to know how to prepare themselves for the worst. And

Speaker 1: I I would I would be kinder to the people involved because, you know, they're they're they're my team. Uh, I would say that it's not a lack of vision. It's a It is being so overwhelmed with so much else that you have on your plate event.

Speaker 2: That's a yeah,

Speaker 1: even even something as big of a deal is. That is still not the worst thing that happened that day. Like that's like when you when you have have so one team. I started measuring Pedro today alerts to all the different teams, and this actually gets into one of the least proud things of my career that I have ever built. Uh, I built a system that we needed a way to get a bunch of people on a bridge immediately. The problem is, when we're talking, a bunch of people were talking dozens of people over 100 people on a bridge, and we needed a way to make this happen without us having to sequentially dial everyone. Uh, so how do you wake up 100 people in the middle of the night and have them all join a bridge? So we realized Hey, wait a minute. Uber conference is the thing, and we can have a contact database that dials everyone in that database for whatever phone or text message we have available for them. The problem is, you have to keep that updated like, Well, that doesn't work so well. But the Uber Conference bit like the dialing works. Great. So what we came up with is we already have all the contact information populated and pager duty using the page UT FBI. We're pulling from HR system populating prejudice E with that. So all the contact points and pigeon is already there. Well, why don't we take that information and then build an application that works with the pages of the A p I the uber conference a p I so that when I want to get everyone on a bridge, I just hit a button. It automatically starts dialing everyone. I

Speaker 2: feel so horrible for the people on the other side of that. But I mean, I can see why you did it, but at the same time, It to me It's just like it seems like a very big hammer toe. Wait, toe

Speaker 1: dammit! It absolutely is. And how this all started Waas. We have 30 people, 30 people in the company and a dozen engineers. So how'd you get a dozen engineers on a call? And that's where we started with This idea was like, This is what we want. And then as the company's growing so quickly, I didn't have like, Well, now we have 100 engineers and we got to get them all in the call in, like, at some point, you gotta step back like hang on. Did we just solve the wrong problem? Like I think we did something down here, but we built it. I'm not proud of that, but it worked pretty well, So it's kind of like best practices for really dumb ideas. You want to build a really dumb idea. Here's a great way to do it. So, using we would the the on call level to give you a sense of why this was such an issue of like when you have these bugs I'm talking about that ultimately destroyed a company like, how does one bug destroyed company? It's not one bug using this system. We were measuring how much the on call load waas and some of the teams were receiving. We're receiving dozens or hundreds of pages a day for on call like someone looking for the on call for that one team. It might be 100 30 150 pages in a day like that's insane like this. Not on call anymore in the big red button, as we called it to get everyone in some weeks, that felt like it was happening 12123 times a week. Uh, I don't I can't recall exactly how many times it really happened, but the fact that it feels that way, it's pretty indicative of how you feel. Uh, and for a couple of years after I left, I would I was still waking up, waking up in the middle of the night, thinking my phone was going off.

Speaker 2: Yeah, that's a really common theme on this podcast, to be honest with you, that Oh, I'm sure Pete, a lot of people end up talking to me about how, you know, after years of being on call, they deal with what is kind of almost like video. I don't want call it post traumatic stress because I think that over sells it. But there is a thing where you feel like you're still on call even when you're not. And I feel like there's a little bit of emotional trauma associate with the work that you do. But I don't know if it's like I said, I don't know if it's worthy of calling it a P T s d type of situation, but I was actually I would challenge

Speaker 1: you on that because I I think it absolutely is so, so overselling it. So I've spoken with with counselors before about this, and PTSD is not restricted to more time. It is not restricted to soldiers. Oh, absolutely agree. I like It s so, uh, being my bit of vulnerable time here, I had a building next door to me burned down in a massive inferno, and it woke me up the middle of the night to the fire alarm going off in all that. And look, it's absolutely terrible. Uh, I was fine. My building was fine. All my stuff was fine. And fire departments Absolutely wonderful. But even to this day, I When a fire alarm goes off, I still start shaking. And is that PTSD? Yes, absolutely. It iss meat like it is post traumatic stress and being on call. Yeah, it's the same way. Like it took me years to get over being on call and not thinking my phone was ringing or not like waking up in the middle of the night sweating. So it absolutely is post traumatic stress. Okay, that's one of the things that I I rail against so much is that people underplay how much impact it has. Oh, yeah. On call is terrible. Like, these terrible things are happening to me right now, but I'm not sure if it's post traumatic stress, like Whoa, buddy, like if you say it isn't, then you're not going to be able to get help.

Speaker 2: No, no, that's a really great perspective on it. Thank you. Because I think that one of the things that I should do try to get from people is to take what they've learned. Not just from a technical standpoint, but from an emotional standpoint. Uh, all right, so

Speaker 1: can I mention a Ah, I recently did A are not recently a couple months ago, I did a podcast recording myself with Dr Shelley Sherry Walling. She is a licensed psychologist, and her night did a fantastic discussion about on call burnouts, stress, anxiety and what it all means and howl howto handle that. But specifically in the context of s Ari's being on call

Speaker 2: Interesting. You definitely share that with the audience. I'll put that in the show notes. If you want to send me, I think people really enjoy the soap. Let me let me ask you some. Just a follow up, then to the bigger incident. What do you think was most learned in the time on call during these, Like consistent incidents where the business eventually was taken down. What would you say is the big thing that they take away, if you will.

Speaker 1: So there were for me personally, I got to see how on call works at scale in a very busy company. And I got to see a whole lot of stuff that doesn't work. Um, namely like, right off the bat is taking like having meetings on What did we learn from this on call incident and coming out with action items? You're never one or two action items. There are dozens of action items. It will always happen. The problem is where it does go and they pretty much always going to the ticket system. But now you've got a dozen or more action items of things that need to be changed, and no one's ever gonna look at him again because you're gonna go back to your day job like whatever is working on to begin with. So the end result there was that doing these like, Well, we had this one failure. Let's architect things are like change how we're doing things to prevent that failure from ever being a failure again. While, well, intentions never actually worked like I am spark too busy for that to really work. Well, so that was interesting, because up until then, that's exactly what I had been advocating of. Like, you should do this. Well, it turns out that doesn't work. Great. Mmm. Um, well, as far as like, other things, unfortunately like, there was so many things that we learned that we just due to the culture of this company we couldn't implement. Yeah, because the company is moving so quickly and just the upper management's had these A. In a lot of cases, their hands were even tied to buy a customer requirements and contractual obligations. Um, we didn't have enough people. We didn't have enough, ah, budget to hire more. So even when we did hire more, it was really to backfill rolls. Or like we were to take some of the load off of an already overloaded team, so it didn't actually give us extra capacity. So all that to

Speaker 2: say the foot over and over, if you will.

Speaker 1: Yeah, over and over and over. Like, imagine if you're running at 150% capacity. A SZ far is like your team work load goes. If you hire another person, you don't have slack. That's not a thing like you might still be running 125% capacity now. Well, now your new person's overloaded, too, so you haven't actually solved your problem. So what I learned is that in a lot of situations, hiring more people doesn't help the problem. Really. What we should have done was simply do less work.

Speaker 2: Just you're moving the deck chairs around, if you will, rather than right, actually, like adding additional chairs. You're just shuffling around how much the technical debt really is. So yeah, I get it. Uh, so let me ask you a question, and then we'll see. Ah, what What you've been up to lately? A little bit more. Uh, if there's something that you could advise a person that's on call right now to do piece of advice, what would it be? Oh,

Speaker 1: my goodness. Uh, where the wave it start on that one. Yeah. I have so much advice.

Speaker 2: Sure. Something that stands out to you the most

Speaker 1: s 01 thing that I recently advised to team to do that I am a huge fan of is the I. Actually, I think I learned this from the folks that Twitter's are shot out to the folks that twitter. Uh, the job of the person on call should be just on call and anything related to working on reliability and resiliency. Mmm. So if my normal job is s ary of whatever, like I'm I'm in a team of a handful of other s Aries and I'm doing the general like, Let's keep the side up sort of thing you have. I may or may not be working on projects. I'm probably fighting experiment of fires, whether I'm on call or not, probably working documentation, a few projects here and there. Well, when I'm on call when anyone is on call because on call takes such head space, it takes so much mental overheads and handle. And because of what I learned working for this other company of if you you can't just add more people that problem, you actually have to do less work. That's the only way you're going to end up with slack. Slack is important, like slack time, not the company, you know. So my advice is, the job of the person on call should be just on call and anything dealing with making on called better. So, for example, in between me entering on call pages and handling those incidents I should be working on Hey, you know what h a proxy was? Head this weird bug and like it made it difficult to manage and cause an incident. Well, after that's done, I should be focusing my time that week or that phone call period on improving that sort of problem. Okay, sometimes those don't all get solved inside of the week or inside of your period. So at the on call handoff, that's important to bring up and say, Hey, this thing happens. It caused this problem. I started working on it, but we haven't finished it yet, So I want to prioritize this for this week. Like, let's put that in our Sprint plan and make sure it gets done.

Speaker 2: It's reduced before the liberal by putting things in our overall projects to make things and like, easier

Speaker 1: right. But the crucial bit here is that my normal job when I go on call, stops like it has

Speaker 2: go. Yep, you know more of the actual working on the better load balancing tool or something like that. It's let's take care of what's not working.

Speaker 1: Yeah, right. Like the entire job of the person on call should be to improve on call as well as manage those incidents, And that should be true for everyone that goes on call. So every time you switch whoever's primary on call that becomes their job and whatever they're normal job is stops until they go back off on call and the cute. The big benefit to this is that it stops you from taking on so much more work. Like most people treat on call is an extra set of duties, but it really should be just your duties. Like it's part of your job. It shouldn't be an extra part of your job

Speaker 2: just baked into the part that you're going to be doing anyway, right? Cool. So tell me a little bit about what you're up to lately and how people can get in touch with you if they want to talk to you more or less for your podcast.

Speaker 1: Yeah, Absolutely. So, uh, what I'm primarily working on these days is I run the doctor group. This is my partnership with Cory Quinn, Cloud Economist. We help companies reducer and there are eight of us spills way we cut the bill by a large amounts permits all that always as well as helping companies understand what levers they have at their disposal to manage that cost going forward. So people can also find me in my work at, so you can find the duct over but ductal group dot com That's D u c k B i l l Look, and you can also find monitoring weekly at monitoring dot Love. Yes, that is actually a till the It's awesome. And I'll and I run the real World Devils podcast, which is really world dev ops dot com. Very cool. And, ah, what's your Twitter handle? Twitter is Mike underscore? Julian? That's J u l A m.

Speaker 2: Sounds like it'll be very easy for them to find you like so much for sometime today. Yeah, really? If it, uh, this chat And like I said, they're always better ways to do own call. I say it every time we do this podcast in every conversation I have with someone I learned a little bit more, and hopefully you do too. So we'll be right back with the on call minders. Podcast will finish up. Thanks again. Mike. Really appreciate you being with me today.

Speaker 1: Yeah. Thank you. Thanks for having me.

Speaker 2: Great. We'll be right back. If you want to find Mike, can add Mike, Underscore. Julian on Twitter. Great conversation. Thanks so much, Mike. Next week I'll be back and I will be home Hopefully, it sounds a little better than this this week. I'll have some better equipment than I actually bought a cool digital recorder. So I think that the quality of the podcast is gonna go up. Um, I'm looking forward to talking to some really amazing people that I've got kind on the horizon Bread and Burns has agreed to be on the podcast, so I'm gonna try to get that Don't really soon. He and I are both going to be a chef comp in the next couple weeks, so I may be able to get in touch with him there. If not, then I'm probably gonna just do it over zoom. Anyhow, if you'd like to be on the podcast, it's really easy. You can send me an email on call nightmares at gmail dot com. You can send me a tweet, acts on call Nightmare or at J destro. That's it for this week. And remember, every week I tried to come here and bring you conversations with technologists that have spent time on call, and hopefully you continue to learn some really awesome stuff. So thanks a lot. It will see next
